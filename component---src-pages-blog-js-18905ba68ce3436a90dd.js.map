{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/blog.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","data","useState","filteredData","query","state","setState","allFeaturedImages","allFile","edges","allPosts","allMarkdownRemark","featuredImageMap","Utils","filteredPosts","title","className","type","placeholder","onChange","e","target","value","filter","post","frontmatter","description","tags","author","stdQuery","toLowerCase","excerpt","includes","join","key","id","to","fields","featuredImage","subtitle","date"],"mappings":"mOAAe,G,UAAA,CACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,Q,kCCjBP,4FAMe,sBAAe,IAAZY,EAAW,EAAXA,KAAW,EACDC,mBAAS,CACjCC,aAAc,GACdC,MAAO,KAFFC,EADoB,KACbC,EADa,KAMrBC,EAAoBN,EAAKO,QAAQC,OAAS,GAC1CC,EAAWT,EAAKU,kBAAkBF,OAAS,GAE3CG,EAAmBC,IAAM9B,YAAYwB,EAD7B,kBA0BNJ,EAAwBE,EAAxBF,aACFW,EAA0B,KADAT,EAAVD,MACeD,EAAeO,EAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAM,SACX,kBAAC,IAAD,CAAWA,MAAM,YACjB,kBAAC,IAAD,CAAWC,UAAU,yBACnB,kBAAC,IAAD,CAAMA,UAAU,wBACd,kBAAC,IAAD,CACEA,UAAU,iBACVC,KAAK,OACLC,YAAY,SACZC,SApCW,SAAAC,GACnB,IAAMhB,EAAQgB,EAAEC,OAAOC,MAEjBnB,EAAeO,EAASa,QAAO,SAAAC,GAAQ,MAEEA,EAAKhC,KAAKiC,YAA/CC,EAFmC,EAEnCA,YAAaX,EAFsB,EAEtBA,MAAOY,EAFe,EAEfA,KAAMC,EAFS,EAETA,OAE5BC,EAAWzB,EAAM0B,cACvB,OACEN,EAAKhC,KAAKuC,QAAQD,cAAcE,SAASH,IACxCH,GAAeA,EAAYI,cAAcE,SAASH,IACnDd,EAAMe,cAAcE,SAASH,IAC7BD,EAAOE,cAAcE,SAASH,IAC7BF,GAAQA,EAAKM,KAAK,IAAIH,cAAcE,SAASH,MAIlDvB,EAAS,CACPF,QACAD,sBAqBA,kBAAC,IAAD,CACEJ,OAAK,EACLiB,UAAU,gEAETF,EAAczB,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACjB,yBAAK0C,IAAK1C,EAAK2C,GAAInB,UAAU,OAC3B,kBAAC,IAAD,CACEoB,GAAI5C,EAAK6C,OAAO9C,KAChB+C,cAAe1B,EAAiBpB,EAAK6C,OAAO9C,MAC5CwB,MAAOvB,EAAKiC,YAAYV,MACxBwB,SAAU/C,EAAKiC,YAAYe,KAC3BT,QAASvC,EAAKuC","file":"component---src-pages-blog-js-18905ba68ce3436a90dd.js","sourcesContent":["export default {\r\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\r\n    return images.reduce((map, image) => {\r\n      const slug = image.node.relativePath.match(regex)[0]\r\n      if (hasMultipleImages) {\r\n        if (map.hasOwnProperty(slug)) {\r\n          if (map[slug].length <= limit)\r\n            map[slug].push(image.node.childImageSharp.fluid)\r\n        } else {\r\n          const arr = []\r\n          arr.push(image.node.childImageSharp.fluid)\r\n          map[slug] = arr\r\n        }\r\n      } else {\r\n        map[slug] = image.node.childImageSharp.fluid\r\n      }\r\n      return map\r\n    }, {})\r\n  },\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { PageLayout, PageTitle, BlogLink } from \"../components\"\r\nimport { SEO, Utils } from \"../utils\"\r\nimport { Container, Form, FormControl } from \"react-bootstrap\"\r\n\r\nexport default ({ data }) => {\r\n  const [state, setState] = useState({\r\n    filteredData: [],\r\n    query: \"\",\r\n  })\r\n\r\n  const allFeaturedImages = data.allFile.edges || []\r\n  const allPosts = data.allMarkdownRemark.edges || []\r\n  const regex = /\\/[blog].*\\/|$/\r\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex)\r\n\r\n  const handleChange = e => {\r\n    const query = e.target.value\r\n\r\n    const filteredData = allPosts.filter(post => {\r\n      // query will run on the following fields\r\n      const { description, title, tags, author } = post.node.frontmatter\r\n      // standardize query\r\n      const stdQuery = query.toLowerCase()\r\n      return (\r\n        post.node.excerpt.toLowerCase().includes(stdQuery) ||\r\n        (description && description.toLowerCase().includes(stdQuery)) ||\r\n        title.toLowerCase().includes(stdQuery) ||\r\n        author.toLowerCase().includes(stdQuery) ||\r\n        (tags && tags.join(\"\").toLowerCase().includes(stdQuery))\r\n      )\r\n    })\r\n\r\n    setState({\r\n      query,\r\n      filteredData,\r\n    })\r\n  }\r\n\r\n  const { filteredData, query } = state\r\n  const filteredPosts = query !== \"\" ? filteredData : allPosts\r\n\r\n  return (\r\n    <PageLayout>\r\n      <SEO title=\"Blog\" />\r\n      <PageTitle title=\"My Blog\" />\r\n      <Container className=\"px-5 mb-5 text-center\">\r\n        <Form className=\"aurebesh blog-filter\">\r\n          <FormControl\r\n            className=\"bg-none search\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            onChange={handleChange}\r\n          />\r\n        </Form>\r\n      </Container>\r\n      <Container\r\n        fluid\r\n        className=\"p-3 w-auto text-left d-flex flex-wrap justify-content-center\"\r\n      >\r\n        {filteredPosts.map(({ node }) => (\r\n          <div key={node.id} className=\"p-3\">\r\n            <BlogLink\r\n              to={node.fields.slug}\r\n              featuredImage={featuredImageMap[node.fields.slug]}\r\n              title={node.frontmatter.title}\r\n              subtitle={node.frontmatter.date}\r\n              excerpt={node.excerpt}\r\n            />\r\n          </div>\r\n        ))}\r\n      </Container>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            description\r\n            tags\r\n            author\r\n            date(formatString: \"DD MMMM, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n    allFile(\r\n      filter: {\r\n        extension: { eq: \"jpg\" }\r\n        relativePath: { regex: \"/feature/\" }\r\n        relativeDirectory: { regex: \"/content/blog/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n          relativePath\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}